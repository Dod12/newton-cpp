cmake_minimum_required(VERSION 3.22)
project(Newton)

set(CMAKE_CXX_STANDARD 20)
set(PYTHONVERSION 3.10 CACHE STRING "")
set(PYBIND11_PYTHON_VERSION 3.10 CACHE STRING "")
set(PYBIND11_FINDPYTHON ON)
#find_package(BLAS REQUIRED)
find_package(OpenMP REQUIRED)
find_package(Eigen3 3.3 REQUIRED NO_MODULE)
find_package(pybind11 2.9.2 REQUIRED CONFIG)

if (CMAKE_BUILD_TYPE STREQUAL "Release_donotuse")
    set(MKL_LINK static)
    set(MKL_INTERFACE lp64)
    set(MKL_THREADING intel_thread)
    set(MKL_MPI mpich)
    find_package(MKL CONFIG REQUIRED)
    add_compile_options(-m64  -I"${MKL_ROOT}/include" -Xclang -fopenmp)
    add_link_options(${MKL_ROOT}/lib/libmkl_intel_lp64.a ${MKL_ROOT}/lib/libmkl_intel_thread.a ${MKL_ROOT}/lib/libmkl_core.a -lomp -lpthread -lm -ldl)
    add_definitions(-DEIGEN_USE_MKL_ALL)
endif()

add_compile_options(-m64 -Xclang -fopenmp)

pybind11_add_module(py_newton src/py_newton.cpp src/Fractal.cpp src/Fractal.h extern/progressbar.hpp)

target_link_libraries(py_newton PRIVATE Eigen3::Eigen pybind11::module)
#target_link_libraries(py_newton PRIVATE OpenMP::OpenMP_CXX)

if (CMAKE_BUILD_TYPE STREQUAL "Release_donotuse")
    target_compile_options(py_newton PRIVATE $<TARGET_PROPERTY:MKL::MKL,INTERFACE_COMPILE_OPTIONS>)
    target_include_directories(py_newton PRIVATE $<TARGET_PROPERTY:MKL::MKL,INTERFACE_INCLUDE_DIRECTORIES>)
    target_link_libraries(py_newton PRIVATE $<LINK_ONLY:MKL::MKL>)
endif()

add_executable(Newton src/main.cpp src/Fractal.cpp src/Fractal.h extern/progressbar.hpp)
target_link_libraries(Newton PRIVATE Eigen3::Eigen OpenMP::OpenMP_CXX)

if (CMAKE_BUILD_TYPE STREQUAL "Release_donotuse")
    target_compile_options(Newton PRIVATE $<TARGET_PROPERTY:MKL::MKL,INTERFACE_COMPILE_OPTIONS>)
    target_include_directories(Newton PRIVATE $<TARGET_PROPERTY:MKL::MKL,INTERFACE_INCLUDE_DIRECTORIES>)
    target_link_libraries(Newton PRIVATE $<LINK_ONLY:MKL::MKL>)
    #target_link_libraries(py_newton PRIVATE OpenMP::OpenMP_CXX)
endif()
